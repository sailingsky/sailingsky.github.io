[{"content":"目前很多应用开发部署都是基于Docker容器化，为了简化本地开发测试，可以在idea中进行相关配置，即可实现本地打包部署高效率。\n前置条件 装有Docker的服务器 Idea Docker服务器配置 修改/usr/lib/systemd/system/docker.service配置： 1 vi /usr/lib/systemd/system/docker.service 在配置项ExecStart中加入 -H tcp://0.0.0.0:10086： 配置完成后记得重启docker\n1 2 systemctl daemon-reload systemctl restart docker 顺便记得确认防火墙，相关端口记得开放：\n1 2 3 4 5 firewall-cmd --zone=public --add-port=10086/tcp --permanent firewall-cmd --reload #查看开放的端口 firewall-cmd --list-all idea配置: settings-\u0026gt;Build-\u0026gt;Docker新增docker配置，输入docker服务所在ip及之前配置的端口 配置Docker Registry,这步作用是方便拉取镜像打包时所依赖的其他镜像，如不配置国内镜像源，会容易出现镜像拉取失败：\n建立示例工程测试： idea中建个springboot工程，此步骤简单略过。\n修改pom.xml文件，加入plugin,dockerHost属性配置之前定义好的:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;com.spotify\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;docker-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.2.2\u0026lt;/version\u0026gt; \u0026lt;executions\u0026gt; \u0026lt;execution\u0026gt; \u0026lt;id\u0026gt;build-image\u0026lt;/id\u0026gt; \u0026lt;phase\u0026gt;package\u0026lt;/phase\u0026gt; \u0026lt;goals\u0026gt; \u0026lt;goal\u0026gt;build\u0026lt;/goal\u0026gt; \u0026lt;/goals\u0026gt; \u0026lt;/execution\u0026gt; \u0026lt;/executions\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;dockerHost\u0026gt;http://192.168.65.131:2375\u0026lt;/dockerHost\u0026gt; \u0026lt;imageName\u0026gt;zsj/${project.artifactId}\u0026lt;/imageName\u0026gt; \u0026lt;imageTags\u0026gt; \u0026lt;imageTag\u0026gt;${project.version}\u0026lt;/imageTag\u0026gt; \u0026lt;/imageTags\u0026gt; \u0026lt;forceTags\u0026gt;true\u0026lt;/forceTags\u0026gt; \u0026lt;dockerDirectory\u0026gt;${project.basedir}\u0026lt;/dockerDirectory\u0026gt; \u0026lt;resources\u0026gt; \u0026lt;resource\u0026gt; \u0026lt;targetPath\u0026gt;/\u0026lt;/targetPath\u0026gt; \u0026lt;directory\u0026gt;${project.build.directory}\u0026lt;/directory\u0026gt; \u0026lt;include\u0026gt;${project.build.finalName}.jar\u0026lt;/include\u0026gt; \u0026lt;/resource\u0026gt; \u0026lt;/resources\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/plugin\u0026gt; 工程根目录新增Dockerfile:\n1 2 3 4 FROM openjdk:8-jdk-alpine ARG JAR_FILE=target/*.jar COPY ${JAR_FILE} app.jar ENTRYPOINT [\u0026#34;java\u0026#34;,\u0026#34;-jar\u0026#34;,\u0026#34;/app.jar\u0026#34;] 运行maven的package任务：\n成功后可在控制台看到如下输出：\n登录docker所在服务器，查看镜像是否打包上传成功：\n","date":"2023-11-14T11:16:14+08:00","image":"https://sailingsky.github.io/p/idea%E6%9E%84%E5%BB%BA%E6%89%93%E5%8C%85%E4%B8%8A%E4%BC%A0docker%E9%95%9C%E5%83%8F/5-maniere-deplacer-conteneur-docker-vers-autre-machine_hu5e9a2feb3483bf40d57feb14e1a23a14_88760_120x120_fill_q75_box_smart1.jpeg","permalink":"https://sailingsky.github.io/p/idea%E6%9E%84%E5%BB%BA%E6%89%93%E5%8C%85%E4%B8%8A%E4%BC%A0docker%E9%95%9C%E5%83%8F/","title":"Idea构建打包上传Docker镜像"},{"content":"题目定义： 给定一个不含重复数字的数组 nums ，返回其 所有可能的全排列 。你可以 按任意顺序 返回答案。\n示例 1：\n输入：nums = [1,2,3] 输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]] 示例 2：\n输入：nums = [0,1] 输出：[[0,1],[1,0]] 示例 3：\n输入：nums = [1] 输出：[[1]]\n整体算法思路： 采用回溯算法，遍历循环数组，形成路径，每一层中循环的都是数组的所有元素，为了不使元素重复，加入额外的存储空间存储判断。\n题解： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; permute(int[] nums) { //存储最终结果 List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; result = new ArrayList\u0026lt;\u0026gt;(); //临时存储数组中元素是否已被当前路径使用 boolean[] used = new boolean[nums.length]; //路径 LinkedList\u0026lt;Integer\u0026gt; path = new LinkedList\u0026lt;\u0026gt;(); backTrace(path,used,nums,result); return result; } public void backTrace(LinkedList\u0026lt;Integer\u0026gt; path,boolean[] used,int[] nums,List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; result){ //当这条路径元素数和数组大小一致时，说明该条路径已走完，存储结果并返回 if (path.size()==nums.length) { result.add(new ArrayList\u0026lt;\u0026gt;(path)); return; } for(int i = 0;i\u0026lt; nums.length;i++){ //当数组元素标记被使用，跳过 if(used[i]) continue; //将元素加入路径中 path.add(nums[i]); //标记元素被使用 used[i] = true; //回溯往下选择路径 backTrace(path,used,nums,result); //往回撤销选择 used[i] =false; //去除路径中已选择的元素 path.removeLast(); } } ","date":"2023-11-13T17:30:56+08:00","image":"https://sailingsky.github.io/post/algorithm/pexels-google-deepmind-18069816.jpg","permalink":"https://sailingsky.github.io/p/%E5%85%A8%E6%8E%92%E5%88%97/","title":"全排列"},{"content":"起因 最近因工作需要，需要调用grpc服务的一个接口，以前也没接触过，接口提供方呢就扔了个proto文件过来，没法，在网上到处翻翻找找，说的都比较杂乱，缺少部分细节，就简单写个文章记录下吧。\n具体细节 引入proto文件 在工程\\src\\main目录下新建proto目录，将服务提供方提供的proto文件放入该目录。\npom.xml文件引入依赖及maven插件：\n1 2 3 4 5 6 \u0026lt;!-- grpc client --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;net.devh\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;grpc-client-spring-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.14.0.RELEASE\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; maven插件：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 \u0026lt;extensions\u0026gt; \u0026lt;!-- os-maven-plugin 插件，从 OS 系统中获取参数 --\u0026gt; \u0026lt;extension\u0026gt; \u0026lt;groupId\u0026gt;kr.motd.maven\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;os-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.5.0.Final\u0026lt;/version\u0026gt; \u0026lt;/extension\u0026gt; \u0026lt;/extensions\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;!-- protobuf-maven-plugin 插件，通过 protobuf 文件，生成 Service 和 Message 类 --\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.xolstice.maven.plugins\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;protobuf-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.5.1\u0026lt;/version\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;pluginId\u0026gt;grpc-java\u0026lt;/pluginId\u0026gt; \u0026lt;protocArtifact\u0026gt;com.google.protobuf:protoc:3.5.1:exe:${os.detected.classifier} \u0026lt;/protocArtifact\u0026gt; \u0026lt;pluginArtifact\u0026gt;io.grpc:protoc-gen-grpc-java:1.51.0:exe:${os.detected.classifier} \u0026lt;/pluginArtifact\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;executions\u0026gt; \u0026lt;execution\u0026gt; \u0026lt;goals\u0026gt; \u0026lt;goal\u0026gt;compile\u0026lt;/goal\u0026gt; \u0026lt;goal\u0026gt;compile-custom\u0026lt;/goal\u0026gt; \u0026lt;/goals\u0026gt; \u0026lt;/execution\u0026gt; \u0026lt;/executions\u0026gt; application.yaml中添加grpc配置：\n1 2 3 4 5 6 7 grpc: client: grpc-client: address: \u0026#39;static://${grpc服务地址}\u0026#39; enableKeepAlive: true keepAliveWithoutCalls: true negotiationType: plaintext 跑mvn compile任务，将protobuf文件生成对应的Java代码\n在业务代码中调用grpc服务：\n1 2 3 4 5 6 7 8 @GrpcClient(\u0026#34;grpc-client\u0026#34;) private xxGrpc.xxBlockingStub xxStub; public boolean sync(){ Request.SyncRequest request = Request.SyncRequest.newBuilder().setType(\u0026#34;sync\u0026#34;).build(); Response.CommonResponse commonResponse = xxStub.syncRulesHandler(request); return commonResponse.getCode()==0; } 验证grpc服务：\n如果只是想单纯验证下grpc服务是否正常，可以用postman进行操作。\n选择请求类型grpc：\n导入protobuf文件：\n接着就可以输入grpc服务地址及对应参数进行测试了。\n","date":"2023-11-09T11:06:11+08:00","image":"https://sailingsky.github.io/p/spring-boot-%E8%B0%83%E7%94%A8grpc/steve-busch-b_nBSjoGtrU-unsplash_hu3d03a01dcc18bc5be0e67db3d8d209a6_1755468_120x120_fill_q75_box_smart1.jpg","permalink":"https://sailingsky.github.io/p/spring-boot-%E8%B0%83%E7%94%A8grpc/","title":"Spring boot 调用Grpc"},{"content":"斐波那契数列定义： 引用自维基百科：\n斐波那契数（意大利语：Successione di Fibonacci），又译为菲波拿契数、菲波那西数、斐氏数、黄金分割数。所形成的数列称为斐波那契数列（意大利语：Successione di Fibonacci），又译为菲波拿契数列、菲波那西数列、斐氏数列、黄金分割数列。这个数列是由意大利数学家斐波那契在他的《算盘书》中提出。\n在数学上，斐波那契数是以递归的方法来定义：\n（) 用文字来说，就是斐波那契数列由0和1开始，之后的斐波那契数就是由之前的两数相加而得出。\n递归解法1： 根据其数学定义，采用递归方式，直译成代码：\n1 2 3 4 static int fib1(int n){ if(n==0||n==1) return n; return fib1(n-1)+fib1(n-2); } 此种方式简单明了，但运行起来会发现，随着n的增大，其耗时也随着增大变慢。其中原因在于会重复计算，如n=40时，第一次递归时计算f(39)和f(38)，第二次递归时计算f(38),f(37)以及f(37)和f(36)。为了加快效率，我们可以加入个临时存储空间，将计算过的结果存放与此。\n递归临时存储： 运用数组存放已计算过的结果，数组长度为n+1;\n1 2 3 4 5 6 7 static int fibWithArrayTemp(int n,int[] temp){ if(n==0||n==1) return n; //如果该位置非0，说明已经存在计算结果 if(temp[n]!=0) return temp[n]; temp[n] = fibWithArrayTemp(n-1,temp)+fibWithArrayTemp(n-2,temp); return temp[n]; } 动态规划解法： 以上解法都是利用递归，从上往下进行，采用动态规划，由下往上进行计算。辅助数组dptable用于存储计算过程中产生的结果。\n1 2 3 4 5 6 7 8 9 static int fibWithDP(int n){ if(n==0) return 0; int[] dptable = new int[n+1]; dptable[0]=0;dptable[1]=1; for(int i=2;i\u0026lt;=n;i++){ dptable[i] = dptable[i-1]+dptable[i-2]; } return dptable[n]; } 动态规划解法-优化： 上面的都是通过创建n+1个元素数组，作为临时结果存储。空间复杂度为O(N),那还有没有可能优化一下。当然是可以的，我们可以找出规律，发现有用的都是前两个结果元素，可以只用两个变量存储即可，这样能将空间复杂度降为O(1)。\n1 2 3 4 5 6 7 8 9 10 11 12 13 static int fibWithDPOpt(int n ){ if(n==0) return 0; //前后两个元素 int pre= 0,post = 1 ; int result = 0; for(int i=2;i\u0026lt;=n;i++){ result = pre+post; //滚动更新前后两个元素结果 pre = post; post = result; } return result; } ","date":"2023-09-25T10:52:14+08:00","image":"https://sailingsky.github.io/post/algorithm/pexels-google-deepmind-18069816.jpg","permalink":"https://sailingsky.github.io/p/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97%E8%A7%A3%E6%B3%95/","title":"斐波那契数列解法"},{"content":"下载安装hugo 去github上下载对应系统的安装包：hugo安装包。由于我是windows系统，那就下载windows版本。 下载完成后，解压将安装文件放至到某个目录。修改环境变量path,添加刚才hugo文件所在路径。 命令行验证是否本地安装成功： 创建Github仓库 创建博客源文件内容仓库： 名字随意取 创建GitHub Pages仓库： 仓库名称必须使用\u0026lt;username.github.io\u0026gt;的格式，username为GitHub的用户名: ~~### 将博客源文件内容仓库拉到本地：\n1 git clone https://github.com/username/blog.git ~~### 用hugo创建网站：\n进入刚下的本地仓库文件夹，如blog 使用命令hugo new site 网站名称创建网站。 1 2 cd blog hugo new site bytecode-blog ~~### 安装和配置hugo主题\n进入到之前的myblog目录，根据选择的hugo主题安装文件，我这里选择的是stack主题：\n1 git submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack ~~### 配置主题\n将themes\\hugo-theme-stack\\exampleSite里面的content文件以及config.yaml拷贝覆盖到根目录下\n更简单的作法，前面删除线的步骤皆可不用！ 如果确定使用stack主题，直接去GitHub下载stack-starter工程。 修改config\\_default目录下的config.toml文件，将baseurl修改为：https://\u0026lt;github-username\u0026gt;.github.io/ 运行hugo server命令，即可在本地看到效果。 运行hugo命令，将生成对应的静态文件。在public文件夹下。 进入到public文件夹，执行以下命令,将静态文件上传到Github： 1 2 3 4 5 6 7 8 9 10 11 git init -b main git remote add origin git@github.com:\u0026lt;github-username\u0026gt;/\u0026lt;github-username\u0026gt;.github.io.git git pull --rebase origin main git add . git commit -m \u0026#39;message\u0026#39; git push origin main 查看效果： 接着你就可以访问https://\u0026lt;github-username\u0026gt;.github.io查看效果了： ","date":"2023-09-17T18:07:30+08:00","image":"https://sailingsky.github.io/p/build-blog/cover_hu3d03a01dcc18bc5be0e67db3d8d209a6_790554_120x120_fill_q75_box_smart1.jpg","permalink":"https://sailingsky.github.io/p/build-blog/","title":"Build Blog"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt;\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\rDiff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] One line code block 1 \u0026lt;p\u0026gt;A paragraph\u0026lt;/p\u0026gt; List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nThe above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2023-09-07T00:00:00Z","permalink":"https://sailingsky.github.io/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Hugo theme Stack supports the creation of interactive image galleries using Markdown. It\u0026rsquo;s powered by PhotoSwipe and its syntax was inspired by Typlog.\nTo use this feature, the image must be in the same directory as the Markdown file, as it uses Hugo\u0026rsquo;s page bundle feature to read the dimensions of the image. External images are not supported.\nSyntax 1 ![Image 1](1.jpg) ![Image 2](2.jpg) Result Photo by mymind and Luke Chesser on Unsplash\n","date":"2023-08-26T00:00:00Z","image":"https://sailingsky.github.io/p/image-gallery/2_hubce42636ecacc1a380b462f3110efcec_37455_120x120_fill_q75_box_smart1.jpg","permalink":"https://sailingsky.github.io/p/image-gallery/","title":"Image gallery"},{"content":"For more details, check out the documentation.\nBilibili video Tencent video YouTube video Generic video file Your browser doesn't support HTML5 video. Here is a link to the video instead. Gist GitLab Quote Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― A famous person, The book they wrote Photo by Codioful on Unsplash\n","date":"2023-08-25T00:00:00Z","image":"https://sailingsky.github.io/p/shortcodes/cover_huec3c3e34981507583e214021ad1b9a4b_12942_120x120_fill_q75_box_smart1.jpg","permalink":"https://sailingsky.github.io/p/shortcodes/","title":"Shortcodes"},{"content":"Stack has built-in support for math typesetting using KaTeX.\nIt\u0026rsquo;s not enabled by default side-wide, but you can enable it for individual posts by adding math: true to the front matter. Or you can enable it side-wide by adding math = true to the params.article section in config.toml.\nInline math This is an inline mathematical expression: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\n1 $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$ Block math $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n1 2 3 $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$ $$ f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi),e^{2 \\pi i \\xi x},d\\xi $$\n1 2 3 $$ f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi $$ ","date":"2023-08-24T00:00:00Z","permalink":"https://sailingsky.github.io/p/math-typesetting/","title":"Math Typesetting"},{"content":"Welcome to Hugo theme Stack. This is your first post. Edit or delete it, then start writing!\nFor more information about this theme, check the documentation: https://stack.jimmycai.com/\nWant a site like this? Check out hugo-theme-stack-stater\nPhoto by Pawel Czerwinski on Unsplash\n","date":"2022-03-06T00:00:00Z","image":"https://sailingsky.github.io/p/hello-world/cover_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://sailingsky.github.io/p/hello-world/","title":"Hello World"}]